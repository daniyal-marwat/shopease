/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WishlistRouteImport } from './routes/wishlist'
import { Route as UpdatePasswordRouteImport } from './routes/update-password'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as SearchRouteImport } from './routes/search'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotRouteImport } from './routes/forgot'
import { Route as CartRouteImport } from './routes/cart'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductProductIdRouteImport } from './routes/product/$productId'
import { Route as CategoryCategoryRouteImport } from './routes/category/$category'

const WishlistRoute = WishlistRouteImport.update({
  id: '/wishlist',
  path: '/wishlist',
  getParentRoute: () => rootRouteImport,
} as any)
const UpdatePasswordRoute = UpdatePasswordRouteImport.update({
  id: '/update-password',
  path: '/update-password',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotRoute = ForgotRouteImport.update({
  id: '/forgot',
  path: '/forgot',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductProductIdRoute = ProductProductIdRouteImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoryCategoryRoute = CategoryCategoryRouteImport.update({
  id: '/category/$category',
  path: '/category/$category',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/forgot': typeof ForgotRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/signup': typeof SignupRoute
  '/update-password': typeof UpdatePasswordRoute
  '/wishlist': typeof WishlistRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/product/$productId': typeof ProductProductIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/forgot': typeof ForgotRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/signup': typeof SignupRoute
  '/update-password': typeof UpdatePasswordRoute
  '/wishlist': typeof WishlistRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/product/$productId': typeof ProductProductIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/forgot': typeof ForgotRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/signup': typeof SignupRoute
  '/update-password': typeof UpdatePasswordRoute
  '/wishlist': typeof WishlistRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/product/$productId': typeof ProductProductIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/forgot'
    | '/login'
    | '/profile'
    | '/search'
    | '/signup'
    | '/update-password'
    | '/wishlist'
    | '/category/$category'
    | '/product/$productId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cart'
    | '/forgot'
    | '/login'
    | '/profile'
    | '/search'
    | '/signup'
    | '/update-password'
    | '/wishlist'
    | '/category/$category'
    | '/product/$productId'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/forgot'
    | '/login'
    | '/profile'
    | '/search'
    | '/signup'
    | '/update-password'
    | '/wishlist'
    | '/category/$category'
    | '/product/$productId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  ForgotRoute: typeof ForgotRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  SearchRoute: typeof SearchRoute
  SignupRoute: typeof SignupRoute
  UpdatePasswordRoute: typeof UpdatePasswordRoute
  WishlistRoute: typeof WishlistRoute
  CategoryCategoryRoute: typeof CategoryCategoryRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/wishlist': {
      id: '/wishlist'
      path: '/wishlist'
      fullPath: '/wishlist'
      preLoaderRoute: typeof WishlistRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/update-password': {
      id: '/update-password'
      path: '/update-password'
      fullPath: '/update-password'
      preLoaderRoute: typeof UpdatePasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot': {
      id: '/forgot'
      path: '/forgot'
      fullPath: '/forgot'
      preLoaderRoute: typeof ForgotRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/category/$category': {
      id: '/category/$category'
      path: '/category/$category'
      fullPath: '/category/$category'
      preLoaderRoute: typeof CategoryCategoryRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  ForgotRoute: ForgotRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  SearchRoute: SearchRoute,
  SignupRoute: SignupRoute,
  UpdatePasswordRoute: UpdatePasswordRoute,
  WishlistRoute: WishlistRoute,
  CategoryCategoryRoute: CategoryCategoryRoute,
  ProductProductIdRoute: ProductProductIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
